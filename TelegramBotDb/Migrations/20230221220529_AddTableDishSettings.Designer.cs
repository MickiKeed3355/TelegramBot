// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramBotDb;

#nullable disable

namespace TelegramBotDb.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230221220529_AddTableDishSettings")]
    partial class AddTableDishSettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TelegramBot.Data.Model.DishSetting", b =>
                {
                    b.Property<long>("DishId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.HasKey("DishId");

                    b.ToTable("DishSetting");
                });

            modelBuilder.Entity("TelegramBot.Data.Model.DishUserAccess", b =>
                {
                    b.Property<long>("DishId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreateChatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DishId");

                    b.ToTable("DishUserAccess");
                });

            modelBuilder.Entity("TelegramBot.Data.Model.UserAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("NameDish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipeDish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("TelegramBotDb.Model.Dish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recipe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeDish")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("TelegramBotDb.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TelegramBot.Data.Model.DishSetting", b =>
                {
                    b.HasOne("TelegramBotDb.Model.Dish", "Dish")
                        .WithOne("DishSetting")
                        .HasForeignKey("TelegramBot.Data.Model.DishSetting", "DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("TelegramBot.Data.Model.DishUserAccess", b =>
                {
                    b.HasOne("TelegramBotDb.Model.Dish", "Dish")
                        .WithMany("DishUserAccess")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("TelegramBotDb.Model.Dish", b =>
                {
                    b.Navigation("DishSetting")
                        .IsRequired();

                    b.Navigation("DishUserAccess");
                });
#pragma warning restore 612, 618
        }
    }
}
